package behaviortree

import ()

// person is an entity in the ECS sense, with a behavior component
// along with some other data like position, health, etc.
type person struct {
	health int
	bt     BehaviorTree
}

func newPerson() *person {
	return &person{
		health: 10,
		bt:     BehaviorTree{
			// &Sequence(struct{Children: [
			// 		&taskWait{duration: 2 * time.Second, visited: false},
			// 	&taskWait{duration: 1 * time.Second, visited: false},
			// 	]
			// }),
			// newSequence(
			// 	&taskWait{duration: 2 * time.Second, visited: false},
			// 	&taskWait{duration: 1 * time.Second, visited: false},
			// ),
		},
	}
}

// func (p *person) idle(in interface{}, out interface{}) {
// 	p.health--
// }

// func (p *person) eat(in interface{}, out interface{}) {
// 	p.health = 10
// }
