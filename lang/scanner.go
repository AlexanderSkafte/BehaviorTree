package lang

/*
	CREDIT:
	https://blog.gopheracademy.com/advent-2014/parsers-lexers/
*/

import (
	"bufio"
	"bytes"
	"io"
	"strings"
	"unicode"
)

// Token is a lexical token generated by the scanner.
type Token int

// A list of available tokens.
const (
	tokenINVALID Token = iota
	tokenEOF
	tokenWS
	tokenBL
	tokenBR
	tokenPL
	tokenPR
	tokenCOMMA
	tokenCOLON
	tokenID

	tokenComposite
	tokenDecorator
	tokenCondition
	tokenAction

	// TODO Make tokens for categories (Composite, Decorator, Leaf)

	// tokenSEQUENCE
	// tokenSELECTOR
	// tokenACTION
	// tokenCONDITION
	// tokenINVERTER
)

// Used by the isKeyword function, among others.
// var lit2tok = map[string]Token{
// 	"SEQUENCE": tokenSEQUENCE,
// 	"SELECTOR": tokenSELECTOR,
// 	"INVERTER": tokenINVERTER,
// 	"!":        tokenACTION,
// 	"?":        tokenCONDITION,
// }

var categoryFor = map[string]Token{
	"COMPOSITE": tokenComposite,
	"+":         tokenComposite,
	"DECORATOR": tokenDecorator,
	"*":         tokenDecorator,
	"ACTION":    tokenAction,
	"!":         tokenAction,
	"CONDITION": tokenCondition,
	"?":         tokenCondition,
}

const (
	rEOF          = rune(0)
	rBracketLeft  = rune('{')
	rBracketRight = rune('}')
	rParenLeft    = rune('(')
	rParenRight   = rune(')')
	rComma        = rune(',')
	rColon        = rune(':')
	// rExclamation  = rune('!')
	// rQuestion     = rune('?')
)

// TokenIsEOF returns true if `tok` is an EOF token.
func TokenIsEOF(tok Token) bool {
	return tok == tokenEOF
}

// TokenIsWhitespace returns true if `tok` is a whitespace token.
func TokenIsWhitespace(tok Token) bool {
	return tok == tokenWS
}

// TokenIsInvalid returns true if `tok` is an invalid token.
func TokenIsInvalid(tok Token) bool {
	return tok == tokenINVALID
}

func isKeyword(lit string) bool {
	_, ok := categoryFor[lit]
	return ok
}

func isWhitespace(ch rune) bool {
	return unicode.IsSpace(ch)
}

func isLetter(ch rune) bool {
	return unicode.IsLetter(ch)
}

func isDigit(ch rune) bool {
	return unicode.IsDigit(ch)
}

// Scanner ...
type Scanner struct {
	r *bufio.Reader
}

// NewScanner returns a scanner that reads from `r`.
func NewScanner(r io.Reader) *Scanner {
	return &Scanner{r: bufio.NewReader(r)}
}

func (s *Scanner) read() rune {
	ch, _, err := s.r.ReadRune()
	if err != nil {
		return rEOF
	}
	return ch
}

func (s *Scanner) unread() {
	_ = s.r.UnreadRune()
}

// Scan scans one token, and returns the token and the scanned string.
func (s *Scanner) Scan() (tok Token, lit string) {
	ch := s.read()

	if isWhitespace(ch) {
		s.unread()
		return s.scanWhitespace()

	} else if isLetter(ch) {
		s.unread()
		return s.scanWord()

	} else if ch == '!' {
		return tokenAction, string(ch)

	} else if ch == '?' {
		return tokenCondition, string(ch)

	} else if ch == '*' {
		return tokenDecorator, string(ch)

	} else if ch == '+' {
		return tokenComposite, string(ch)
	}

	switch ch {
	case rEOF:
		return tokenEOF, ""
	case rBracketLeft:
		return tokenBL, string(ch)
	case rBracketRight:
		return tokenBR, string(ch)
	case rParenLeft:
		return tokenPL, string(ch)
	case rParenRight:
		return tokenPR, string(ch)
	case rColon:
		return tokenCOLON, string(ch)
	case rComma:
		return tokenCOMMA, string(ch)
	}

	return tokenINVALID, string(ch)
}

func (s *Scanner) scanWhitespace() (tok Token, lit string) {
	var buf bytes.Buffer
	buf.WriteRune(s.read())
	for {
		if ch := s.read(); ch == rEOF {
			break
		} else if !isWhitespace(ch) {
			s.unread()
			break
		} else {
			buf.WriteRune(ch)
		}
	}
	return tokenWS, buf.String()
}

func (s *Scanner) scanWord() (tok Token, lit string) {
	var buf bytes.Buffer
	buf.WriteRune(s.read())
	for {
		if ch := s.read(); ch == rEOF {
			break
		} else if !validWordRune(ch) {
			s.unread()
			break
		} else {
			_, _ = buf.WriteRune(ch)
		}
	}

	// If the string matches a keyword then return that keyword.
	lit = strings.ToUpper(buf.String())
	if tok, ok := categoryFor[lit]; ok {
		return tok, lit
	}

	// Otherwise return as a regular identifier.
	return tokenID, buf.String()
}

func validWordRune(ch rune) bool {
	return isLetter(ch) || isDigit(ch) || ch == '_' || ch == '.'
}
